// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cerebellum-network/cere-ddc-sdk-go/contract/pkg/subscription (interfaces: ChainSubscriptionFactory)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	state "github.com/centrifuge/go-substrate-rpc-client/v4/rpc/state"
	subscription "github.com/cerebellum-network/cere-ddc-sdk-go/contract/pkg/subscription"
	gomock "github.com/golang/mock/gomock"
)

// MockChainSubscriptionFactory is a mock of ChainSubscriptionFactory interface.
type MockChainSubscriptionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockChainSubscriptionFactoryMockRecorder
}

// MockChainSubscriptionFactoryMockRecorder is the mock recorder for MockChainSubscriptionFactory.
type MockChainSubscriptionFactoryMockRecorder struct {
	mock *MockChainSubscriptionFactory
}

// NewMockChainSubscriptionFactory creates a new mock instance.
func NewMockChainSubscriptionFactory(ctrl *gomock.Controller) *MockChainSubscriptionFactory {
	mock := &MockChainSubscriptionFactory{ctrl: ctrl}
	mock.recorder = &MockChainSubscriptionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainSubscriptionFactory) EXPECT() *MockChainSubscriptionFactoryMockRecorder {
	return m.recorder
}

// NewChainSubscription mocks base method.
func (m *MockChainSubscriptionFactory) NewChainSubscription(arg0 *state.StorageSubscription) subscription.ChainSubscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChainSubscription", arg0)
	ret0, _ := ret[0].(subscription.ChainSubscription)
	return ret0
}

// NewChainSubscription indicates an expected call of NewChainSubscription.
func (mr *MockChainSubscriptionFactoryMockRecorder) NewChainSubscription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChainSubscription", reflect.TypeOf((*MockChainSubscriptionFactory)(nil).NewChainSubscription), arg0)
}

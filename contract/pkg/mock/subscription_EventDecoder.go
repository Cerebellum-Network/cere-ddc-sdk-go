// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cerebellum-network/cere-ddc-sdk-go/contract/pkg/subscription (interfaces: EventDecoder)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
)

// MockEventDecoder is a mock of EventDecoder interface.
type MockEventDecoder struct {
	ctrl     *gomock.Controller
	recorder *MockEventDecoderMockRecorder
}

// MockEventDecoderMockRecorder is the mock recorder for MockEventDecoder.
type MockEventDecoderMockRecorder struct {
	mock *MockEventDecoder
}

// NewMockEventDecoder creates a new mock instance.
func NewMockEventDecoder(ctrl *gomock.Controller) *MockEventDecoder {
	mock := &MockEventDecoder{ctrl: ctrl}
	mock.recorder = &MockEventDecoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDecoder) EXPECT() *MockEventDecoderMockRecorder {
	return m.recorder
}

// DecodeEvents mocks base method.
func (m *MockEventDecoder) DecodeEvents(arg0 types.StorageDataRaw, arg1 *types.Metadata) (*types.EventRecords, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeEvents", arg0, arg1)
	ret0, _ := ret[0].(*types.EventRecords)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeEvents indicates an expected call of DecodeEvents.
func (mr *MockEventDecoderMockRecorder) DecodeEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeEvents", reflect.TypeOf((*MockEventDecoder)(nil).DecodeEvents), arg0, arg1)
}

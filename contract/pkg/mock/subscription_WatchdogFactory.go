// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cerebellum-network/cere-ddc-sdk-go/contract/pkg/subscription (interfaces: WatchdogFactory)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	subscription "github.com/cerebellum-network/cere-ddc-sdk-go/contract/pkg/subscription"
	gomock "github.com/golang/mock/gomock"
)

// MockWatchdogFactory is a mock of WatchdogFactory interface.
type MockWatchdogFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatchdogFactoryMockRecorder
}

// MockWatchdogFactoryMockRecorder is the mock recorder for MockWatchdogFactory.
type MockWatchdogFactoryMockRecorder struct {
	mock *MockWatchdogFactory
}

// NewMockWatchdogFactory creates a new mock instance.
func NewMockWatchdogFactory(ctrl *gomock.Controller) *MockWatchdogFactory {
	mock := &MockWatchdogFactory{ctrl: ctrl}
	mock.recorder = &MockWatchdogFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatchdogFactory) EXPECT() *MockWatchdogFactoryMockRecorder {
	return m.recorder
}

// NewWatchdog mocks base method.
func (m *MockWatchdogFactory) NewWatchdog(arg0 time.Duration) subscription.Watchdog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWatchdog", arg0)
	ret0, _ := ret[0].(subscription.Watchdog)
	return ret0
}

// NewWatchdog indicates an expected call of NewWatchdog.
func (mr *MockWatchdogFactoryMockRecorder) NewWatchdog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWatchdog", reflect.TypeOf((*MockWatchdogFactory)(nil).NewWatchdog), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/centrifuge/go-substrate-rpc-client/v4/rpc/chain (interfaces: Chain)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	chain "github.com/centrifuge/go-substrate-rpc-client/v4/rpc/chain"
	types "github.com/centrifuge/go-substrate-rpc-client/v4/types"
	gomock "github.com/golang/mock/gomock"
)

// MockChain is a mock of Chain interface.
type MockChain struct {
	ctrl     *gomock.Controller
	recorder *MockChainMockRecorder
}

// MockChainMockRecorder is the mock recorder for MockChain.
type MockChainMockRecorder struct {
	mock *MockChain
}

// NewMockChain creates a new mock instance.
func NewMockChain(ctrl *gomock.Controller) *MockChain {
	mock := &MockChain{ctrl: ctrl}
	mock.recorder = &MockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChain) EXPECT() *MockChainMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *MockChain) GetBlock(arg0 types.Hash) (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", arg0)
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockChainMockRecorder) GetBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChain)(nil).GetBlock), arg0)
}

// GetBlockHash mocks base method.
func (m *MockChain) GetBlockHash(arg0 uint64) (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHash", arg0)
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHash indicates an expected call of GetBlockHash.
func (mr *MockChainMockRecorder) GetBlockHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHash", reflect.TypeOf((*MockChain)(nil).GetBlockHash), arg0)
}

// GetBlockHashLatest mocks base method.
func (m *MockChain) GetBlockHashLatest() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockHashLatest")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockHashLatest indicates an expected call of GetBlockHashLatest.
func (mr *MockChainMockRecorder) GetBlockHashLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockHashLatest", reflect.TypeOf((*MockChain)(nil).GetBlockHashLatest))
}

// GetBlockLatest mocks base method.
func (m *MockChain) GetBlockLatest() (*types.SignedBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockLatest")
	ret0, _ := ret[0].(*types.SignedBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockLatest indicates an expected call of GetBlockLatest.
func (mr *MockChainMockRecorder) GetBlockLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockLatest", reflect.TypeOf((*MockChain)(nil).GetBlockLatest))
}

// GetFinalizedHead mocks base method.
func (m *MockChain) GetFinalizedHead() (types.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinalizedHead")
	ret0, _ := ret[0].(types.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFinalizedHead indicates an expected call of GetFinalizedHead.
func (mr *MockChainMockRecorder) GetFinalizedHead() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinalizedHead", reflect.TypeOf((*MockChain)(nil).GetFinalizedHead))
}

// GetHeader mocks base method.
func (m *MockChain) GetHeader(arg0 types.Hash) (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", arg0)
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockChainMockRecorder) GetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChain)(nil).GetHeader), arg0)
}

// GetHeaderLatest mocks base method.
func (m *MockChain) GetHeaderLatest() (*types.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderLatest")
	ret0, _ := ret[0].(*types.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeaderLatest indicates an expected call of GetHeaderLatest.
func (mr *MockChainMockRecorder) GetHeaderLatest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderLatest", reflect.TypeOf((*MockChain)(nil).GetHeaderLatest))
}

// SubscribeFinalizedHeads mocks base method.
func (m *MockChain) SubscribeFinalizedHeads() (*chain.FinalizedHeadsSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFinalizedHeads")
	ret0, _ := ret[0].(*chain.FinalizedHeadsSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFinalizedHeads indicates an expected call of SubscribeFinalizedHeads.
func (mr *MockChainMockRecorder) SubscribeFinalizedHeads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFinalizedHeads", reflect.TypeOf((*MockChain)(nil).SubscribeFinalizedHeads))
}

// SubscribeNewHeads mocks base method.
func (m *MockChain) SubscribeNewHeads() (*chain.NewHeadsSubscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeNewHeads")
	ret0, _ := ret[0].(*chain.NewHeadsSubscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeNewHeads indicates an expected call of SubscribeNewHeads.
func (mr *MockChainMockRecorder) SubscribeNewHeads() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeNewHeads", reflect.TypeOf((*MockChain)(nil).SubscribeNewHeads))
}
